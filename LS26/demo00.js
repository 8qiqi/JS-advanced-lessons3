//单线程与多线程
-//线程是程序执行流的最基本单元（类比单个实体的人），是进程中的一个实体
// 一个线程可与同属一个进程的其它线程共享进程所拥有的系统资源
//标准的线程由线程ID，当前指令指针(PC），寄存器集合和堆栈组成
//JS是单线程的，指的是JS引擎解释和执行代码是单线程的，完成所有任务还要配合其他线程

//阻塞与非阻塞
// 阻塞是指调用结果返回之前，当前线程会被挂起。调用线程只有在得到结果之后才会返回
//非阻塞调用指在不能立刻得到结果之前，该调用不会阻塞当前线程

//同步与异步
// 同步任务：在主线程上排队执行的任务，只有前一个任务执行完毕，才能执行后一个任务
//异步任务：不进入主线程、而进入"任务队列"（task queue）的任务，只有等主线程任务执行完毕，"任务队列"开始通知主线程，请求执行任务，该任务才会进入主线程执行

//回调函数
//优点：简单、容易理解和部署
//缺点：不利于代码的阅读和维护，各部分之间高度耦合（Coupling），流程会很混乱，而且 每个任务只能指定一个回调函数

//事件监听机制
//任务的执行不取决于代码的顺序执行，而取决于某个事件是否发生
//优点：容易理解，可以绑定多个事件，每个事件可以指定多个回调函数，可以在多个不同模块中传递事件和数据
//缺点：整个程序都要变成事件驱动型，运行流程会变的不清晰

//发布订阅（观察者模式）
//发布---订阅模式又叫观察者模式，它定义了对象间的一种一对多的关系，让多个观察者对象 同时监听某一个主题对象，当一个对象发生改变时，所有依赖于它的对象都将得到通知
//发布---订阅模式的性质与“事件监听”类似，但是我们可以通过常“消息中心”，了解存在 多少信号、每个信号有多少订阅者，从而监控程序的运行

//Promise
//每一个异步任务返回一个Promise对象，可链式的指定回调函数
//优点：回调函数编程里链式写法，程序的流程更接近人们的思维方式，便于理解和代码追踪
// 缺点：要求对异步有更深入的理解

